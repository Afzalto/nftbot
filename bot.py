import asyncio
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.bot import DefaultBotProperties
from catalog import catalog, category_names


from catalog import category_names, catalog as initial_catalog

TOKEN = "7238684986:AAH_A8GoW47TY0UVSsfej-kkLQZdia1uMWI"
ADMINS = ["afzalto", "asck11"]

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

DATA_FILE = Path("catalog_data.json")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ catalog.py
def load_catalog():
    if DATA_FILE.exists():
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ catalog_data.json:", e)
    return initial_catalog.copy()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ JSON
def save_catalog(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print("–ö–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞:", e)

catalog = load_catalog()

class AddGiftState(StatesGroup):
    choosing_category = State()
    entering_name = State()
    entering_price = State()
    entering_link = State()

# –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_sent_messages = {}

@dp.message(F.text == "/start")
async def start(message: Message):
    await send_catalog(message)

async def send_catalog(target):
    kb = InlineKeyboardBuilder()
    for cat_id, name in category_names.items():
        kb.add(InlineKeyboardButton(text=name, callback_data=f"cat:{cat_id}"))
    kb.adjust(2)
    await target.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("cat:"))
async def show_products(callback: CallbackQuery):
    global catalog
    catalog = load_catalog()  # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON

    cat_id = callback.data.split(":")[1]
    products = catalog.get(cat_id, [])
    
    await callback.message.delete()

    # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    old_messages = user_sent_messages.get(callback.from_user.id, [])
    for msg_id in old_messages:
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except:
            pass  # —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    sent_ids = []

    if not products:
        msg = await callback.message.answer("üéÅ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        sent_ids.append(msg.message_id)
    else:
        for item in products:
            text = f"<b>{item['name']}</b>\n–¶–µ–Ω–∞: {item['price']}"
            button = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üõç –ö—É–ø–∏—Ç—å", url=item["link"])
            ]])
            msg = await callback.message.answer(text, reply_markup=button)
            sent_ids.append(msg.message_id)

    # –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è
    back_kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_catalog")
    ]])
    msg = await callback.message.answer("‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=back_kb)
    sent_ids.append(msg.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ID
    user_sent_messages[callback.from_user.id] = sent_ids
    await callback.answer()

@dp.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    old_messages = user_sent_messages.get(callback.from_user.id, [])
    for msg_id in old_messages:
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except:
            pass
    user_sent_messages[callback.from_user.id] = []

    await send_catalog(callback.message)
    await callback.answer()

@dp.message(F.text == "/add_gift")
async def add_gift_start(message: Message, state: FSMContext):
    if not message.from_user.username or message.from_user.username.lower() not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    kb = InlineKeyboardBuilder()
    for cat_id, name in category_names.items():
        kb.add(InlineKeyboardButton(text=name, callback_data=f"add_cat:{cat_id}"))
    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=kb.as_markup())
    await state.set_state(AddGiftState.choosing_category)

@dp.callback_query(F.data.startswith("add_cat:"), AddGiftState.choosing_category)
async def choose_category(callback: CallbackQuery, state: FSMContext):
    cat_id = callback.data.split(":")[1]
    await state.update_data(cat_id=cat_id)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:")
    await state.set_state(AddGiftState.entering_name)
    await callback.answer()

@dp.message(AddGiftState.entering_name)
async def enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞ (—á–∏—Å–ª–æ–º):")
    await state.set_state(AddGiftState.entering_price)

@dp.message(AddGiftState.entering_price)
async def enter_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(price=int(message.text))
    await message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫:")
    await state.set_state(AddGiftState.entering_link)

@dp.message(AddGiftState.entering_link)
async def enter_link(message: Message, state: FSMContext):
    data = await state.get_data()
    cat_id = data["cat_id"]
    name = data["name"]
    price = data["price"]
    link = message.text

    new_gift = {"name": name, "price": price, "link": link}
    catalog.setdefault(cat_id, []).append(new_gift)
    save_catalog(catalog)

    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_catalog"))

    await message.answer(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_names.get(cat_id, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}!", reply_markup=kb.as_markup())
    await state.clear()

@dp.message(F.text == "/remove_gift")
async def remove_gift_cmd(message: Message):
    if not message.from_user.username or message.from_user.username.lower() not in ADMINS:
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤.")

    kb = InlineKeyboardBuilder()
    for cat_id, cat_name in category_names.items():
        kb.add(InlineKeyboardButton(text=cat_name, callback_data=f"rmcat:{cat_id}"))
    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("rmcat:"))
async def remove_gift_choose(callback: CallbackQuery):
    cat_id = callback.data.split(":")[1]
    gifts = catalog.get(cat_id, [])
    if not gifts:
        return await callback.message.edit_text("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.")

    kb = InlineKeyboardBuilder()
    for i, gift in enumerate(gifts):
        kb.add(InlineKeyboardButton(
            text=f"{gift['name']}",
            callback_data=f"rmgift:{cat_id}:{i}"
        ))
    kb.adjust(1)

    await callback.message.edit_text(
        f"–ü–æ–¥–∞—Ä–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_names.get(cat_id, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')} (–Ω–∞–∂–º–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
        reply_markup=kb.as_markup()
    )

@dp.callback_query(F.data.startswith("rmgift:"))
async def remove_gift(callback: CallbackQuery):
    _, cat_id, index_str = callback.data.split(":")
    index = int(index_str)

    try:
        removed = catalog[cat_id].pop(index)
        if not catalog[cat_id]:
            del catalog[cat_id]
        save_catalog(catalog)

        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_catalog"))

        await callback.message.edit_text(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É–¥–∞–ª—ë–Ω: {removed['name']}", reply_markup=kb.as_markup())
    except Exception as e:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.")

@dp.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    for cat_id, name in category_names.items():
        kb.add(InlineKeyboardButton(text=name, callback_data=f"add_cat:{cat_id}"))
    kb.adjust(2)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


